# Question 2: Predictive Modeling and Scenario Analysis

Inicio
  // Import libraries for modeling
  Importar pandas como pd
  Importar numpy como np
  Importar sklearn.model_selection como train_test_split
  Importar sklearn.linear_model como LinearRegression
  Importar sklearn.metrics como mean_squared_error, r2_score

  // Load preprocessed data
  Asignar df = pd.read_csv('preprocessed_data.csv')
  Definir X = df.drop('CO2_Emissions', axis=1)
  Definir y = df['CO2_Emissions']

  // Split data into training and testing sets
  Asignar X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

  // Train regression model
  Instanciar modelo = LinearRegression()
  Ejecutar modelo.fit(X_train, y_train)

  // Evaluate model performance
  Predecir y_pred = modelo.predict(X_test)
  Calcular rmse = np.sqrt(mean_squared_error(y_test, y_pred))
  Calcular r2 = r2_score(y_test, y_pred)

  // Simulate GDP increase scenario
  Copiar X_sim = X.copy()
  Aumentar X_sim['GDP'] por 1.10  // 10% increase
  Predecir co2_sim = modelo.predict(X_sim)
  Calcular cambio_porcentual = ((co2_sim - y) / y) * 100
  Calcular rango_cambios = (np.min(cambio_porcentual), np.max(cambio_porcentual))

  // Document results
  Con open('analysis_q2.md', 'w') como archivo:
    Escribir archivo.write('# Model Selection\nLinear Regression\n# Performance Metrics\nRMSE: {:.2f}\nRÂ²: {:.2f}\n# Scenario Analysis\nExpected Change Range: {:.2f}% to {:.2f}%\n'.format(rmse, r2, rango_cambios[0], rango_cambios[1]))

Fin
